npm init
npm install express
git init

//////////////////////////////////////////////////
git add .
git commit -m "some comment regarding the change"
git push -u origin master
//////////////////////////////////////////////////

///// how to install babel//////////////
npm install @babel/node
npm install @babel/preset-env
npm install @babel/core
////////////////////////////////////////

//// how to install nodemon ////////////
npm instal nodemon -D
///////////////////////////////////////


//// modifying nodemon ///////////////////////////////////////
add --delay 2 inorder to restart the index.js after 2 seconds
//////////////////////////////////////////////////////////////

////// How to use middleware ////////////////////////////
Middlewares are just some portions of the code that do 
something useful before the final handler of a route. We 
usually use app.use(middleware) to accomplish this goal. 
It should be noted that the order of where we put 
app.use(middleware) matters. 
/////////////////////////////////////////////////////////

///// Some useful middlewares ////////////////////////////
npm install morgan -----> http request logger
npm install helmet -----> securing express app by setting various http headers
npm install cookie-parser ---> for cookies and session
npm install body-parser ---> parse incoming request body, available at req.body
//////////////////////////////////////////////////////////

//////// Restructuring the Project //////////////////////////
We created two files namely app.js and init.js. Inside app.js the express app 
is created and exported. Then, inside the init.js file, the app is used.
//////////////////////////////////////////////////////////////////////////

//////// Adding Express router to the project /////////////////////
Adding a simple userRouter and testing its behavior. It is awesome!
///////////////////////////////////////////////////////////////////

/////////// MVC description ///////////////////////////////////////
MVC stands for Model, View, and Controller. The Model part is responsible for data modeling. 
The View part handles the representation, and the Controller part acts as a middleware to 
fetch data from Model and feed it to the View. MVC is one of the most popular software develpment
patterns. 
Here, we are trying to learn MVC and ow to use it inside nodejs application development. 
----Controller part
First step is to add routers for different parts of the application. 
Second step is to name all routes in a specific file called routes.js.
Third step to define controllers. Controllers are just those functions that are
passed to routers. 

------ View part
First: install pug view engine
$ npm install pug
Second: set express view engine to pug
Third: create a directory with the name of views and put templates their with the .pug extension
Fourth: render those template in the response of controllers
Fifth: layout templates
Sixth: adding partials (header and footer) 

/////////////////////////////////////////////////////////////////////